{"version":3,"sources":["features/task/taskSlice.js","features/task/TaskItem.js","features/task/TaskList.js","features/task/TaskInput.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["taskSlice","createSlice","name","initialState","idCount","tasks","reducers","newTask","state","action","newItem","id","title","payload","completed","completeTask","task","find","t","deleteTask","filter","actions","selectTasks","TaskItem","dispatch","useDispatch","type","onClick","defaultChecked","TaskList","useSelector","map","TaskInput","useState","editTitle","setEditTitle","onSubmit","e","preventDefault","value","onChange","target","placeholder","App","className","configureStore","reducer","taskReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAEaA,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAAc,CACVC,QAAS,EACTC,MAAO,IAEXC,SAAU,CACRC,QAAS,SAACC,EAAOC,GAKfD,EAAMJ,UACN,IAAMM,EAAU,CACZC,GAAIH,EAAMJ,QACVQ,MAAOH,EAAOI,QACdC,WAAW,GAEfN,EAAMH,MAAN,CAAeK,GAAf,mBAA2BF,EAAMH,SAEnCU,aAAc,SAACP,EAAOC,GAClB,IAAMO,EAAOR,EAAMH,MAAMY,MAAK,SAACC,GAAD,OAAKA,EAAEP,KAAOF,EAAOI,QAAQF,MACvDK,IACAA,EAAKF,WAAaE,EAAKF,YAG/BK,WAAY,SAACX,EAAOC,GAChBD,EAAMH,MAAQG,EAAMH,MAAMe,QAAO,SAACF,GAAD,OAAKA,EAAEP,KAAOF,EAAOI,QAAQF,U,EAKlBX,EAAUqB,QAA/Cd,E,EAAAA,QAASQ,E,EAAAA,aAAcI,E,EAAAA,WAEzBG,EAAa,SAAAd,GAAK,OAAIA,EAAMQ,KAAKX,OAE/BL,IAAf,QCjBeuB,EAfE,SAAC,GAAa,IAAXP,EAAU,EAAVA,KACVQ,EAAWC,cACjB,OACI,gCACI,uBACIC,KAAK,WACLC,QAAS,kBAAIH,EAAST,EAAaC,KACnCY,eAAgBZ,EAAKF,YAExB,qCAAQE,EAAKJ,MAAb,OACA,wBAAQe,QAAS,kBAAKH,EAASL,EAAWH,KAA1C,wBCCEa,EAXE,WACb,IAAMxB,EAAQyB,YAAYR,GAC1B,OACI,mCACKjB,EAAM0B,KAAI,SAACf,GAAD,OACP,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKL,U,QCkBrBqB,EAxBG,WACd,IAAMR,EAAWC,cADG,EAEcQ,mBAAS,IAFvB,mBAEbC,EAFa,KAEFC,EAFE,KAWpB,OACI,uBAAMC,SANW,SAACC,GAClBA,EAAEC,iBACFd,EAASjB,EAAQ2B,IACjBC,EAAa,KAGb,UACI,uBACIT,KAAK,OACLa,MAAOL,EACPM,SAbc,SAACH,GACvBF,EAAaE,EAAEI,OAAOF,QAadG,YAAY,uBAEhB,6CCRGC,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCPOC,cAAe,CAC5BC,QAAS,CACP9B,KAAM+B,KCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.39cb1227.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const taskSlice = createSlice({\n  name: 'task',\n  initialState: {\n      idCount: 0,\n      tasks: [],\n  },\n  reducers: {\n    newTask: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.idCount ++;\n      const newItem = {\n          id: state.idCount,\n          title: action.payload,\n          completed: false,\n      }\n      state.tasks = [newItem, ...state.tasks]\n    },\n    completeTask: (state, action) => {\n        const task = state.tasks.find((t)=>t.id === action.payload.id)\n        if (task) {\n            task.completed = !task.completed;\n        }\n    },\n    deleteTask: (state, action) => {\n        state.tasks = state.tasks.filter((t)=>t.id !== action.payload.id)\n    },\n  },\n});\n\nexport const { newTask, completeTask, deleteTask} = taskSlice.actions;\n\nexport const selectTasks= state => state.task.tasks;\n\nexport default taskSlice.reducer;\n","import React from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { completeTask, deleteTask } from \"./taskSlice\";\n\n\n\nconst TaskItem = ( {task}) => {\n    const dispatch = useDispatch();\n    return (\n        <div>\n            <input \n                type=\"checkbox\"\n                onClick={()=>dispatch(completeTask(task))}\n                defaultChecked={task.completed}\n             />\n             <span> {task.title} </span>\n             <button onClick={()=> dispatch(deleteTask(task))}>DELETE</button>\n        </div>\n    );\n}\n\nexport default TaskItem\n","import React from 'react';\nimport TaskItem from './TaskItem';\nimport { useSelector } from 'react-redux';\nimport { selectTasks } from \"./taskSlice\";\n\n// functional component\nconst TaskList = () => {\n    const tasks = useSelector(selectTasks);\n    return (\n        <>\n            {tasks.map((task) => (\n                <TaskItem key={task.id} task={task}/>\n            ))}\n        </>\n   );\n}\n\nexport default TaskList\n","import React, { useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { newTask } from \"./taskSlice\";\n\n\nconst TaskInput = () => {\n    const dispatch = useDispatch();\n    const [editTitle, setEditTitle] = useState(\"\");\n    const handleTitleChange = (e) =>{\n        setEditTitle(e.target.value);\n    };\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        dispatch(newTask(editTitle));\n        setEditTitle(\"\");\n    };\n    return(\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={editTitle}\n                onChange={handleTitleChange}\n                placeholder=\"Input Your Task...\"\n            />\n            <button>NEW</button>\n        </form>\n    );\n};\n\nexport default TaskInput\n","import React from 'react';\r\nimport './App.css';\r\nimport TaskList from './features/task/TaskList';\r\nimport TaskInput from './features/task/TaskInput';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <TaskInput />\r\n        <TaskList />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport taskReducer from '../features/task/taskSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    task: taskReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}